import db_functions
import hse_spec_func
import natal_map
from info_validators import validate_birth_place, validate_and_parse_time, validate_and_parse_date
from main import fetch_horoscope, update_daily_horoscope
from menus import create_zodiac_menu, create_menu_yes_no, create_zodiac_menu2, create_main_menu_markup, \
    create_chinese_menu

user_data = {}


def handle_message(message, bot):
    user_id = message.from_user.id
    ensure_user_data_exists(user_id)
    process_user_message(message, user_id, bot)


def ensure_user_data_exists(user_id):
    if user_id not in user_data:
        user_data[user_id] = {}


def handle_registration_process(message, bot):
    date_text = message.text
    is_valid, birth_date = validate_and_parse_date(date_text)
    if is_valid:
        db_functions.set_birthday(birth_date, message.from_user.id)
        bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑?",
                         reply_markup=create_menu_yes_no())
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")


def process_user_message(message, user_id, bot):
    state = db_functions.check_user(user_id)
    if state is None:
        handle_new_user(message, user_id, bot)
    elif state[0] == 'false':
        handle_registration_process(message, bot)
    else:
        handle_registered_user_actions(message, bot)


def handle_new_user(message, user_id, bot):
    db_functions.register_user(user_id, None)
    welcome_message = "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–≥–æ—Ä–æ—Å–∫–æ–ø! üîÆ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
    bot.reply_to(message, welcome_message)


def handle_compatibility(message, bot):
    bot.send_photo(message.chat.id, photo=open('photos/compat.jpg', 'rb'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, –ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
                     reply_markup=create_zodiac_menu2())


def handle_natal_map(message, bot):
    bot.send_photo(message.chat.id, photo=open('photos/natal.jpg', 'rb'))
    natal_map.run(message.from_user.id, message.chat.id, bot)


def handle_HSE_crow(message, bot):
    crow = hse_spec_func.generate_random_crow(message.from_user.id)
    bot.send_photo(message.chat.id, photo=open(f'crow_photos/{crow[0]}.png', 'rb'))
    bot.send_message(message.chat.id, crow[1])


def handle_daily_motivation(message, bot):
    bot.send_photo(message.chat.id, photo=open('photos/motivation.jpg', 'rb'))
    bot.send_message(message.chat.id, hse_spec_func.generate_random_motivation(message.from_user.id))


def handle_daily_horoscope_subscription(message, bot):
    """
    Handles the subscription or unsubscription of the user from the daily horoscope mailing list.
    It toggles the current state of the user's subscription.
    """
    is_subscribed = db_functions.change_subscription(message.from_user.id)
    if is_subscribed == (1,):
        response_message = "Done! –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."
    else:
        response_message = "–ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞."
    bot.send_message(message.chat.id, response_message)


def handle_natal_map_set_awaiting_for_addition_flag(message, user_id, bot):
    if message.text == "–í–≤–µ—Å—Ç–∏ –∏–º—è":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
        user_data[user_id]['awaiting_info'] = 'name'
    elif message.text == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì'")
        user_data[user_id]['awaiting_info'] = 'birth_date'
    elif message.text == "–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú'")
        user_data[user_id]['awaiting_info'] = 'birth_time'
    elif message.text == "–í–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è":
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞'")
        user_data[user_id]['awaiting_info'] = 'birth_place'
    elif message.text == "–í—ã–π—Ç–∏":
        bot.reply_to(message, "–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ 90-—Ö –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏ 15 —Å–æ—é–∑–Ω—ã—Ö —Ä–µ—Å–ø—É–±–ª–∏–∫")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=create_main_menu_markup())


def user_info_name_addition(message, user_id, bot):
    if message.text == "":
        bot.reply_to(message, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        db_functions.update_user_info(user_id, user_name=message.text)
        bot.reply_to(message, "–í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        del user_data[user_id]['awaiting_info']
        natal_map.run(user_id, message.chat.id, bot)


def user_info_birth_date_addition(message, user_id, bot):
    is_valid, birth_date = validate_and_parse_date(message.text)
    if is_valid:
        db_functions.update_user_info(user_id, birth_date=message.text)
        bot.reply_to(message, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        del user_data[user_id]['awaiting_info']
        natal_map.run(user_id, message.chat.id, bot)
    else:
        bot.reply_to(message, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –µ—â–µ —Ä–∞–∑")


def user_info_birth_time_addition(message, user_id, bot):
    is_valid, time_value = validate_and_parse_time(message.text)
    if is_valid:
        db_functions.update_user_info(user_id, birth_time=time_value.strftime('%H:%M'))
        bot.reply_to(message, "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        del user_data[user_id]['awaiting_info']
        natal_map.run(user_id, message.chat.id, bot)
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")


def user_info_birth_place_addition(message, user_id, bot):
    is_valid = validate_birth_place(message.text)
    if is_valid:
        db_functions.update_user_info(user_id, birth_place=message.text)
        bot.reply_to(message, "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        del user_data[user_id]['awaiting_info']
        natal_map.run(user_id, message.chat.id, bot)
    else:
        bot.reply_to(message,
                     "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞'")


def handle_natal_map_info_addition(message, awaiting_info, user_id, bot):
    if awaiting_info == 'name':
        user_info_name_addition(message, user_id, bot)
    elif awaiting_info == 'birth_date':
        user_info_birth_date_addition(message, user_id, bot)
    elif awaiting_info == 'birth_time':
        user_info_birth_time_addition(message, user_id, bot)
    elif awaiting_info == 'birth_place':
        user_info_birth_place_addition(message, user_id, bot)


def handle_daily_horoscope(message, user_id):
    sign = db_functions.get_sign(user_id)
    update_daily_horoscope()
    fetch_horoscope(message, sign)


def handle_zodiac_selection(message, bot):
    bot.send_photo(message.chat.id, photo=open('photos/zodiac_selection.jpg', 'rb'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=create_zodiac_menu())


def handle_chinese_horoscope(message, bot):
    bot.send_photo(message.chat.id, photo=open('photos/chinese_pic.jpg', 'rb'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", reply_markup=create_chinese_menu())


def handle_registered_user_actions(message, bot):
    user_id = message.from_user.id
    if message.text == "üîÆ –ú–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üîÆ":
        handle_daily_horoscope(message, user_id)
    elif message.text == "ü™Ñ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤—ã–±—Ä–∞—Ç—å –∑–æ–¥–∏–∞–∫) ü™Ñ":
        handle_zodiac_selection(message, bot)
    elif message.text == "‚òòÔ∏è –ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø ‚òòÔ∏è":
        handle_chinese_horoscope(message, bot)
    elif message.text == "üëΩ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üëΩ":
        handle_compatibility(message, bot)
    elif message.text == "üé¥ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ üé¥":
        handle_natal_map(message, bot)
    elif message.text == "üê¶‚Äç HSE Special: –ö–∞–∫–∞—è –≤–æ—Ä–æ–Ω–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è? üê¶‚Äç":
        handle_HSE_crow(message, bot)
    elif message.text == "üèÜ –ú–æ—Ç–∏–≤–∞—à–∫–∞ –¥–Ω—è üèÜ":
        handle_daily_motivation(message, bot)
    elif message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è / –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø":
        handle_daily_horoscope_subscription(message, bot)
    elif message.text in ["–í–≤–µ—Å—Ç–∏ –∏–º—è", "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è", "–í–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è"]:
        handle_natal_map_set_awaiting_for_addition_flag(message, user_id, bot)
    elif message.text == "–í—ã–π—Ç–∏":
        bot.send_message(message.chat.id, "–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ 90-—Ö –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏ 15 —Å–æ—é–∑–Ω—ã—Ö —Ä–µ—Å–ø—É–±–ª–∏–∫",
                         reply_markup=create_main_menu_markup())

    elif user_id in user_data and 'awaiting_info' in user_data[user_id]:
        awaiting_info = user_data[user_id]['awaiting_info']
        handle_natal_map_info_addition(message, awaiting_info, user_id, bot)
    else:
        bot.send_message(message.chat.id, '–û–π! –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª :(', reply_markup=create_main_menu_markup())
